{"version":3,"sources":["services/crypto.ts","components/Crypto.tsx","App.tsx","reportWebVitals.ts","globalStyles.ts","index.tsx"],"names":["instance","axios","create","baseURL","getCryptoInfo","crypto","a","get","data","response","updated","moment","timestamp","format","id","rank","symbol","name","priceUsd","Wrapper","styled","div","Info","p","CryptoIcon","img","Crypto","useState","cryptoInfo","updateCryptoInfo","useEffect","fetchData","result","setInterval","src","toLocaleLowerCase","alt","Title","h1","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAGMA,EAAWC,IAAMC,OAAO,CAC5BC,QAAS,+BAYEC,EAAa,uCAAG,WAC3BC,GAD2B,iBAAAC,EAAA,sEAGCN,EAASO,IAAT,iBAAuBF,IAHxB,8BAGmCG,KAHnC,cAGvBC,EAHuB,OAKvBC,EAAUC,IAAOF,EAASG,WAAWC,OAAO,yBALrB,kBAOpB,CACLC,GAAIL,EAASD,KAAKM,GAClBC,KAAMN,EAASD,KAAKO,KACpBC,OAAQP,EAASD,KAAKQ,OACtBC,KAAMR,EAASD,KAAKS,KACpBC,SAAUT,EAASD,KAAKU,SACxBR,YAbyB,2CAAH,sD,OCZpBS,EAAUC,IAAOC,IAAV,6SAiBPC,EAAOF,IAAOG,EAAV,8CAIJC,EAAaJ,IAAOK,IAAV,iGA4CDC,I,IAAAA,EArCf,YAAyC,IAAvBZ,EAAsB,EAAtBA,GAChB,EAAuCa,mBAAS,CAC9Cb,GAAI,GACJC,KAAM,GACNC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVR,QAAS,KANX,mBAAOkB,EAAP,KAAmBC,EAAnB,KAoBA,OAXAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAzB,EAAA,sEACGF,EAAcU,GADjB,OACZkB,EADY,OAEhBH,EAAiBG,GAFD,2CAAH,qDAKfD,IAEAE,YAAYF,EAAW,OACtB,CAACjB,IAGF,eAACK,EAAD,WACE,eAACG,EAAD,oBAAaM,EAAWb,QACxB,eAACO,EAAD,sBAAeM,EAAWZ,UAC1B,eAACM,EAAD,oBAAaM,EAAWX,QACxB,eAACK,EAAD,sBAAeM,EAAWV,YAC1B,eAACI,EAAD,uBAAgBM,EAAWlB,WAE3B,cAACc,EAAD,CACEU,IAAG,8EAAyEN,EAAWZ,OAAOmB,oBAA3F,QACHC,IAAKtB,QC5DPuB,EAAQjB,IAAOkB,GAAV,uEAKLnB,EAAUC,IAAOC,IAAV,wOA4BEkB,I,EAAAA,EAhBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAACH,EAAD,oCACA,eAAC,EAAD,WACE,cAAC,EAAD,CAAQvB,GAAG,YACX,cAAC,EAAD,CAAQA,GAAG,aACX,cAAC,EAAD,CAAQA,GAAG,iBACX,cAAC,EAAD,CAAQA,GAAG,aACX,cAAC,EAAD,CAAQA,GAAG,WACX,cAAC,EAAD,CAAQA,GAAG,eChBJ2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCYCQ,EAnBKC,YAAH,+QCIjBC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.b8fd3312.chunk.js","sourcesContent":["import axios from \"axios\";\nimport moment from \"moment\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.coincap.io/v2/\",\n});\n\ninterface CryptoResponse {\n  id: string;\n  rank: string;\n  symbol: string;\n  name: string;\n  priceUsd: string;\n  updated: string;\n}\n\nexport const getCryptoInfo = async (\n  crypto: string\n): Promise<CryptoResponse> => {\n  let response = await (await instance.get(`assets/${crypto}`)).data;\n\n  let updated = moment(response.timestamp).format(\"DD/MM/YYYY - HH:mm:ss\");\n\n  return {\n    id: response.data.id,\n    rank: response.data.rank,\n    symbol: response.data.symbol,\n    name: response.data.name,\n    priceUsd: response.data.priceUsd,\n    updated,\n  };\n};\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { getCryptoInfo } from \"../services/crypto\";\n\nconst Wrapper = styled.div`\n  max-width: 450px;\n  width: 100%;\n  margin: 20px;\n  background-color: #f94144;\n  padding: 20px;\n  border-radius: 5px;\n  font-size: 1.8rem;\n  position: relative;\n  box-shadow: 1px 2px 5px #222;\n  transition: 0.3s;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nconst Info = styled.p`\n  margin: 5px 0;\n`;\n\nconst CryptoIcon = styled.img`\n  width: 36px;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n`;\n\nfunction Crypto({ id }: { id: string }) {\n  const [cryptoInfo, updateCryptoInfo] = useState({\n    id: \"\",\n    rank: \"\",\n    symbol: \"\",\n    name: \"\",\n    priceUsd: \"\",\n    updated: \"\",\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let result = await getCryptoInfo(id);\n      updateCryptoInfo(result);\n    };\n\n    fetchData();\n\n    setInterval(fetchData, 60000);\n  }, [id]);\n\n  return (\n    <Wrapper>\n      <Info>Rank: {cryptoInfo.rank}</Info>\n      <Info>Symbol: {cryptoInfo.symbol}</Info>\n      <Info>Name: {cryptoInfo.name}</Info>\n      <Info>Price: ${cryptoInfo.priceUsd}</Info>\n      <Info>Updated: {cryptoInfo.updated}</Info>\n\n      <CryptoIcon\n        src={`https://cdn.jsdelivr.net/gh/atomiclabs/cryptocurrency-icons/32/icon/${cryptoInfo.symbol.toLocaleLowerCase()}.png`}\n        alt={id}\n      />\n    </Wrapper>\n  );\n}\n\nexport default Crypto;\n","import styled from \"styled-components\";\nimport Crypto from \"./components/Crypto\";\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-top: 5px;\n`;\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  height: auto;\n  justify-content: space-around;\n  min-height: calc(100vh - 38px);\n  width: 100%;\n  max-width: 980px;\n  margin: 0 auto;\n  flex-wrap: wrap;\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title>cryptocurrency-report</Title>\n      <Wrapper>\n        <Crypto id=\"bitcoin\" />\n        <Crypto id=\"ethereum\" />\n        <Crypto id=\"bitcoin-cash\" />\n        <Crypto id=\"litecoin\" />\n        <Crypto id=\"tether\" />\n        <Crypto id=\"xrp\" />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    font-size: 62.5%;\n  }\n\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    background: #1d3557;\n    color: #f1faee;\n    font-family: 'Roboto', Sans-Serif;\n    font-size: 1.6rem;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyle from \"./globalStyles\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}